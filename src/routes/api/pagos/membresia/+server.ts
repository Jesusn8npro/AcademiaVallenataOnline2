import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { crearPagoMembresia, confirmarPagoMembresia } from '$lib/services/membershipPaymentService';

export const POST: RequestHandler = async ({ request, getClientAddress }) => {
	try {
		console.log('üéØ === NUEVA API PAGO MEMBRES√çA ===');
		
		const data = await request.json();
		console.log('üìù Datos recibidos en /api/pagos/membresia:', JSON.stringify(data, null, 2));

		// Validaci√≥n b√°sica
		const { action, usuarioId, membresiaId, planId, esAnual, email, nombre } = data;
		
		if (!action) {
			return json({
				success: false,
				message: 'Acci√≥n requerida (crear o confirmar)'
			}, { status: 400 });
		}

		// IP del cliente
		const clientIp = getClientAddress();
		console.log('üåê IP del cliente:', clientIp);

		if (action === 'crear') {
			// Validar datos requeridos para creaci√≥n
			if (!usuarioId || !membresiaId || !planId || !email || !nombre) {
				console.error('‚ùå Faltan datos requeridos:', { usuarioId, membresiaId, planId, email, nombre });
				return json({
					success: false,
					message: 'Faltan datos requeridos: usuarioId, membresiaId, planId, email, nombre'
				}, { status: 400 });
			}

			// Preparar datos para el pago
			const datosPago = {
				usuarioId,
				membresiaId,
				planId,
				esAnual: esAnual || false,
				email,
				nombre,
				telefono: data.telefono,
				ip_cliente: clientIp
			};

			console.log('üöÄ Creando pago de membres√≠a...');
			const resultado = await crearPagoMembresia(datosPago);

			if (!resultado.success) {
				console.error('‚ùå Error creando pago:', resultado);
				return json({
					success: false,
					message: resultado.message || 'Error creando pago de membres√≠a',
					error: resultado.error
				}, { status: 500 });
			}

			console.log('‚úÖ Pago de membres√≠a creado exitosamente');
			return json({
				success: true,
				epaycoData: resultado.epaycoData,
				message: 'Pago de membres√≠a preparado correctamente'
			});

		} else if (action === 'confirmar') {
			// Validar datos requeridos para confirmaci√≥n
			const { refPayco, datosConfirmacion } = data;
			
			if (!refPayco || !datosConfirmacion) {
				console.error('‚ùå Faltan datos para confirmaci√≥n:', { refPayco, datosConfirmacion });
				return json({
					success: false,
					message: 'Faltan datos de confirmaci√≥n: refPayco, datosConfirmacion'
				}, { status: 400 });
			}

			console.log('‚úÖ Confirmando pago de membres√≠a...');
			const resultado = await confirmarPagoMembresia(refPayco, datosConfirmacion);

			if (!resultado.success) {
				console.error('‚ùå Error confirmando pago:', resultado);
				return json({
					success: false,
					message: resultado.message || 'Error confirmando pago de membres√≠a',
					error: resultado.error
				}, { status: 500 });
			}

			console.log('‚úÖ Pago de membres√≠a confirmado exitosamente');
			return json({
				success: true,
				data: resultado.data,
				message: 'Membres√≠a activada exitosamente'
			});

		} else {
			return json({
				success: false,
				message: 'Acci√≥n no v√°lida. Use "crear" o "confirmar"'
			}, { status: 400 });
		}

	} catch (error: any) {
		console.error('üí• Error fatal en /api/pagos/membresia:', error);
		console.error('üí• Stack trace:', error.stack);
		return json({
			success: false,
			message: 'Error interno del servidor: ' + error.message,
			error: error.message
		}, { status: 500 });
	}
}; 